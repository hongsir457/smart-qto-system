[
  {
    "pattern": ".*drawing.*\\.py$",
    "rules": [
      "你正在实现一个用于处理建筑结构图纸的模块。根据国家《工程量计算规范》，请提取图纸中所有构件的结构化数据，包括构件编号、类型、尺寸、单位，并生成工程量清单。",
      "分析流程包括：OCR识别、文本结构化提取、图像辅助验证、工程量计算与导出。",
      "重点关注数据流边界和构件对象建模，不需要 UI 相关代码。",
      "优化每个函数为清晰的职责单元，命名规范，返回结构清晰。"
    ]
  },
  {
    "pattern": ".*chatgpt_quantity_analyzer\\.py$",
    "rules": [
      "你在实现一个AI分析引擎类，用于两阶段多轮对话：第一阶段结构化提取，第二阶段图像验证。",
      "使用多轮提示词与 GPT-4o 或 Claude 接口交互，确保提取结果准确、冗余信息清洗。",
      "构造系统提示词应尽可能贴近实际造价师语言，便于模型理解。",
      "鼓励使用会话状态（stage / round / memory）管理轮次。"
    ]
  },
  {
    "pattern": ".*component_detection.*\\.py$",
    "rules": [
      "你正在开发一个构件识别器，基于YOLOv8或图像分析模型，从图纸图像中提取构件位置与类型。",
      "返回格式需要包含 bounding box、构件类型、尺寸、图纸比例等字段。",
      "注意兼容异形构件、多框图纸中的构件分布和重复构件编号处理。",
      "实现时注意工程单位的标准换算，例如米和毫米的转换。"
    ]
  },
  {
    "pattern": ".*quantity_calculation_engine.*\\.py$",
    "rules": [
      "你正在实现一个工程量计算核心引擎，输入为结构化构件数据，输出为符合《建筑工程工程量计算规范》的清单表格。",
      "支持按构件类型和单位分类，输出汇总与明细，支持基础、柱、梁、板、墙、楼梯等。",
      "建议每种构件类型封装计算规则为函数，便于单元测试和维护。",
      "注意处理缺失参数的情况，使用默认值或发起补全请求（下一轮提示）。"
    ]
  },
  {
    "pattern": ".*frame_detection.*\\.py$",
    "rules": [
      "你正在开发一个图框识别模块，用于识别 DWG/PDF 图纸中的图框区域。",
      "识别依据包括图层名（FRAME/BORDER）、图块名、矩形轮廓形状。",
      "输出应为图框边界（左上/右下坐标）+ 图号等图签信息。",
      "支持多个图框按图号顺序排序输出 PNG 切片。"
    ]
  },
  {
    "pattern": ".*tasks/.*\\.py$",
    "rules": [
      "你正在实现Celery任务逻辑，用于异步执行工程量分析任务。",
      "每个任务需包括：状态记录、错误日志、进度推送、最终结果落库。",
      "确保任务支持重试机制和部分失败容错处理。",
      "使用实时任务管理器(RealTimeTaskManager)进行状态跟踪和WebSocket推送。"
    ]
  },
  {
    "pattern": ".*websocket.*\\.py$",
    "rules": [
      "你正在实现WebSocket实时通信模块，用于任务状态推送和用户交互。",
      "必须实现JWT认证验证，确保用户只能看到自己的任务。",
      "支持用户连接管理、消息路由、断线重连机制。",
      "集成RealTimeTaskManager进行任务状态广播。"
    ]
  },
  {
    "pattern": ".*real_time_task_manager.*\\.py$",
    "rules": [
      "你正在实现实时任务管理器，负责任务状态跟踪、WebSocket推送、用户隔离。",
      "支持任务创建、状态更新、用户任务查询、过期任务清理。",
      "集成Redis缓存和PubSub机制，确保跨进程任务状态同步。",
      "实现用户级别的任务隔离，每个用户只能看到自己的任务。"
    ]
  },
  {
    "pattern": ".*api/v1/endpoints.*\\.py$",
    "rules": [
      "你正在实现FastAPI REST API端点，遵循RESTful设计原则。",
      "每个端点需要适当的权限验证、参数校验、错误处理。",
      "返回统一的响应格式，包含状态码、消息、数据字段。",
      "集成实时任务管理器，创建任务时同步状态到WebSocket。"
    ]
  },
  {
    "pattern": ".*models.*\\.py$",
    "rules": [
      "你正在定义SQLAlchemy数据模型，遵循数据库设计规范。",
      "每个模型需要适当的字段约束、索引、关系定义。",
      "实现必要的序列化方法(to_dict)用于API响应。",
      "添加创建时间、更新时间等审计字段。"
    ]
  },
  {
    "pattern": ".*frontend/src/components.*\\.(tsx|ts|jsx|js)$",
    "rules": [
      "你正在开发React组件，使用TypeScript和Ant Design UI库。",
      "组件需要清晰的Props接口定义、状态管理、生命周期处理。",
      "WebSocket连接必须包含JWT认证，实现断线重连机制。",
      "使用实时任务状态，确保用户只看到自己的任务数据。",
      "遵循响应式设计原则，适配不同屏幕尺寸。"
    ]
  },
  {
    "pattern": ".*core/config.*\\.py$",
    "rules": [
      "你正在配置应用核心设置，包括数据库、Redis、JWT、CORS等。",
      "使用环境变量管理敏感配置信息。",
      "提供开发、测试、生产环境的配置差异化。",
      "确保配置的安全性和可维护性。"
    ]
  }
] 